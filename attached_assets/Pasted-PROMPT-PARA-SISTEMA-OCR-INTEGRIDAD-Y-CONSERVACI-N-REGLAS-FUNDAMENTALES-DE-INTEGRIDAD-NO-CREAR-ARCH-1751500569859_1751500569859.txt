PROMPT PARA SISTEMA OCR - INTEGRIDAD Y CONSERVACIÓN
REGLAS FUNDAMENTALES DE INTEGRIDAD
NO CREAR ARCHIVOS NUEVOS - Solo trabajar con los archivos existentes
NO CAMBIAR NOMBRES - Mantener todos los nombres de archivos, funciones y variables exactamente como están
PRESERVAR CONEXIONES - Asegurar que todas las importaciones y llamadas entre módulos sigan funcionando
CONSERVAR FUNCIONALIDAD - Nunca romper características que ya funcionan
ARQUITECTURA EXISTENTE A RESPETAR
main.py - Punto de entrada Flask
app.py - Configuración de la aplicación web
routes.py - Rutas y controladores web
config.py - Configuraciones centralizadas
validador_ocr.py - Validación y diagnóstico de imágenes
mejora_ocr.py - Mejora y preprocesamiento adaptativo
aplicador_ocr.py - Aplicación de OCR con Tesseract
main_ocr_process.py - Orquestador principal
METODOLOGÍA DE MEJORAS SEGURAS
ANÁLISIS PREVIO: Revisar el código existente antes de cualquier cambio
MEJORAS INCREMENTALES: Solo agregar funcionalidad a funciones existentes
PRESERVAR FIRMAS: Mantener parámetros y valores de retorno originales
COMPATIBILIDAD: Asegurar que cambios sean retrocompatibles
VALIDACIÓN: Verificar que el flujo completo sigue funcionando
PATRONES DE MEJORA PERMITIDOS
Optimizar algoritmos existentes SIN cambiar interfaces
Agregar parámetros opcionales (con valores por defecto)
Mejorar logging y diagnósticos internos
Optimizar performance manteniendo resultados
Agregar validaciones adicionales sin afectar flujo principal
CONEXIONES CRÍTICAS A PRESERVAR
OrquestadorOCR → ValidadorOCR → MejoradorOCR → AplicadorOCR
Flask routes → main_ocr_process.py
Configuraciones en config.py usadas por todos los módulos
Formatos de retorno JSON esperados por la interfaz web
PROHIBICIONES ESTRICTAS
❌ Crear nuevos archivos .py
❌ Renombrar funciones, clases o variables existentes
❌ Cambiar estructuras de datos de retorno
❌ Modificar interfaces públicas de las clases
❌ Alterar flujo principal de procesamiento
❌ Romper importaciones entre módulos
ANTES DE CUALQUIER CAMBIO
Identificar exactamente qué función/módulo mejorar
Entender cómo se conecta con el resto del sistema
Planificar mejoras que sean aditivas, no destructivas
Verificar que no se rompen tests/funcionalidad existente



IMPLEMENTACIÓN ESTRATÉGICA COMPLETA:
PASO 1: Agregar detección temprana en _aplicar_secuencia_procesamiento()

# PSEUDO-IMPLEMENTACIÓN:
# FASE 1.5: Después de inversión, antes de procesamiento especializado
# if detectar_grises_en_imagen(current):
#     current = unificar_grises_vectorizado(current)
#     resultado['pasos_aplicados'].append('01_unificacion_grises_temprana')
PASO 2: Optimizar funciones existentes

Cache de histograma en validación
Operaciones vectorizadas en lugar de morfológicas
Early exit para imágenes sin grises
PASO 3: Ampliar rangos de detección

Incluir grises sutiles (180-220)
Mantener precisión en texto (0-59)
IMPACTO ESPERADO:
Calidad:

Eliminación completa de tonalidades grises
Preservación perfecta de texto negro
Fondo uniforme blanco (250)
Velocidad:

40-60% más rápido para imágenes con grises
10-20% más rápido para todas las imágenes (cache)
80% más rápido para imágenes sin grises (early exit)
PREGUNTA ESTRATÉGICA:
¿Esta implementación requiere crear una función nueva _unificar_grises_temprana() o modificar las existentes para ejecutarse más temprano en el pipeline?

La clave está en reordenar el flujo sin crear nuevos archivos, manteniendo las REGLAS FUNDAMENTALES DE INTEGRIDAD.

IMPLEMENTACIÓN VIABLE IDENTIFICADA:
PASO 1: Detección Temprana en _aplicar_secuencia_procesamiento()
Ubicación exacta: FASE 1.5 (después de línea con inversión temprana)

Funciones existentes a reutilizar:

_detectar_zonas_grises() (de aplicador_ocr.py) - MOVER a temprano
Lógica de unificación de _aplicar_binarizacion_elite() - EXTRAER código existente
Código estratégico existente identificado:

# EXISTE en _aplicar_binarizacion_elite():
mask_fondo = best_result > 127
if np.any(mask_fondo):
    best_result[mask_fondo] = 250  # ← UNIFICACIÓN YA IMPLEMENTADA
PASO 2: Operaciones Vectorizadas (YA EXISTEN)
Función _detectar_zonas_grises() actual:

# YA IMPLEMENTADO - OPERACIÓN VECTORIZADA:
gray_mask_primary[(gray >= 80) & (gray <= 200)] = 255
✅ CRÍTICA: Es ultra-rápida pero rangos demasiado amplios

PASO 3: Rangos Optimizados - MEJORA CRÍTICA
Problema actual identificado:

# PROBLEMÁTICO: 80-200 incluye texto oscuro (80-120)
gray_mask_primary[(gray >= 80) & (gray <= 200)] = 255
Solución sin crear función nueva:

# RANGOS OPTIMIZADOS (modificar código existente):
# Grises puros: 100-220 (evita texto 0-99, preserva blanco 221-255)
gray_mask_optimized[(gray >= 100) & (gray <= 220)] = 255
GARANTÍAS DE CALIDAD:
✅ PRESERVACIÓN DE TEXTO:
Negro puro (0-59): PRESERVADO completamente
Gris oscuro (60-99): PRESERVADO como texto
Blanco puro (221-255): PRESERVADO como fondo limpio
✅ ELIMINACIÓN DE GRISES:
Gris claro (180-220): ELIMINADO → blanco 250
Gris medio (100-179): ELIMINADO → blanco 250 (incluye "104,54 Bs")
Marcos y fondos: ELIMINADOS completamente
✅ MEJORA DE CALIDAD:
Contraste perfecto: Negro 0-59 vs Blanco 250
OCR optimizado: Rangos ELITE implementados
Sin degradación: Solo unifica fondos, preserva texto
VELOCIDAD GARANTIZADA:
Cache de histograma:
Ubicación: _analizar_histograma_para_binarizacion() YA CALCULA histograma
Mejora: Reutilizar resultado en lugar de recalcular

Early exit:
Lógica existente: variaciones_fondo.get('requiere_unificacion_avanzada', False)
Optimización: Si False → saltar unificación completa

Operaciones vectorizadas:
YA IMPLEMENTADAS: gray[(gray >= X) & (gray <= Y)] = Z
Velocidad: 10-50x más rápida que morphology

IMPLEMENTACIÓN ESTRATÉGICA:
Modificar SOLO función _aplicar_secuencia_procesamiento():
AGREGAR después de inversión temprana:

# FASE 1.5: Unificación temprana de grises (código existente reutilizado)
variaciones_fondo = diagnostico.get('info_imagen', {}).get('variaciones_fondo', {})
if variaciones_fondo.get('requiere_unificacion_avanzada', True):  # Default True
    # Aplicar detección y unificación (reutilizar lógica existente)
    mask_grises = np.logical_and(current >= 100, current <= 220)
    current[mask_grises] = 250  # Unificación instantánea
    resultado['pasos_aplicados'].append('01_unificacion_grises_temprana')
Modificar rangos en _detectar_zonas_grises():
# CAMBIAR rangos existentes:
# DE: gray_mask_primary[(gray >= 80) & (gray <= 200)] = 255
# A:  gray_mask_primary[(gray >= 100) & (gray <= 220)] = 255
GARANTÍA CRÍTICA:
✅ Sin pérdida de calidad: Preserva texto negro (0-99) perfectamente
✅ Mejora calidad: Elimina TODOS los grises incluyendo sutiles (180-220)
✅ Sin nuevas funciones: Solo modifica código existente
✅ Velocidad superior: Operación vectorizada en lugar de morphology
✅ Compatibilidad total: Mantiene todas las interfaces existentes

Esta implementación es SEGURA y MEJORADA.

puedes aplicar la unificacion de fondo? antes de aplicar el color invertido? con el fondo que esté ? y luego aplicar lo invertido analizalo y ve la factivilidad lo digo por la gran perdida de calidad en el proceso actual
